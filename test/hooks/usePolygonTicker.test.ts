import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import { renderHook, waitFor } from "@testing-library/react";
import { usePolygonTicker } from "@/hooks/usePolygonTicker";

// Mock WebSocket
class MockWebSocket {\n  static CONNECTING = 0;\n  static OPEN = 1;\n  static CLOSING = 2;\n  static CLOSED = 3;\n  \n  readyState = MockWebSocket.CONNECTING;\n  onopen: ((event: Event) => void) | null = null;\n  onclose: ((event: CloseEvent) => void) | null = null;\n  onmessage: ((event: MessageEvent) => void) | null = null;\n  onerror: ((event: Event) => void) | null = null;\n  \n  constructor(public url: string) {\n    setTimeout(() => {\n      this.readyState = MockWebSocket.OPEN;\n      this.onopen?.(new Event("open"));\n    }, 100);\n  }\n  \n  send(data: string) {\n    // Mock sending data\n  }\n  \n  close() {\n    this.readyState = MockWebSocket.CLOSED;\n    this.onclose?.(new CloseEvent("close"));\n  }\n}\n\n// Mock fetch for Finnhub API\nconst mockFetch = vi.fn();\nglobal.fetch = mockFetch;\n\ndescribe("usePolygonTicker", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    global.WebSocket = MockWebSocket as any;\n    \n    // Mock successful Finnhub response\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({\n        c: 4200.50, // current price\n        h: 4220.75, // high\n        l: 4175.50, // low\n        o: 4180.25, // open\n        pc: 4180.25, // previous close\n        t: Date.now() / 1000, // timestamp\n      }),\n    });\n  });\n  \n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n  \n  it("should initialize with null ticker data", () => {\n    const { result } = renderHook(() => usePolygonTicker("ES"));\n    \n    expect(result.current.tickerData).toBeNull();\n    expect(result.current.isConnected).toBe(false);\n    expect(result.current.error).toBeNull();\n  });\n  \n  it("should fetch data from Finnhub API on web platform", async () => {\n    vi.mocked(require("react-native").Platform).OS = "web";\n    \n    const { result } = renderHook(() => usePolygonTicker("ES"));\n    \n    await waitFor(() => {\n      expect(result.current.tickerData).not.toBeNull();\n    });\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringContaining("finnhub.io/api/v1/quote?symbol=ES")\n    );\n    expect(result.current.tickerData?.symbol).toBe("ES");\n    expect(result.current.tickerData?.price).toBe(4200.50);\n  });\n  \n  it("should handle Finnhub API errors gracefully", async () => {\n    vi.mocked(require("react-native").Platform).OS = "web";\n    mockFetch.mockRejectedValue(new Error("Network error"));\n    \n    const { result } = renderHook(() => usePolygonTicker("ES"));\n    \n    await waitFor(() => {\n      expect(result.current.error).not.toBeNull();\n    });\n    \n    expect(result.current.error).toContain("Network error");\n  });\n  \n  it("should use mock data when API keys are not configured", async () => {\n    vi.mocked(require("react-native").Platform).OS = "ios";\n    process.env.EXPO_PUBLIC_POLYGON_API_KEY = undefined;\n    \n    const { result } = renderHook(() => usePolygonTicker("ES"));\n    \n    await waitFor(() => {\n      expect(result.current.tickerData).not.toBeNull();\n    });\n    \n    expect(result.current.isConnected).toBe(true);\n    expect(result.current.tickerData?.symbol).toBe("ES");\n    expect(typeof result.current.tickerData?.price).toBe("number");\n  });\n  \n  it("should provide refresh function", () => {\n    const { result } = renderHook(() => usePolygonTicker("ES"));\n    \n    expect(typeof result.current.refresh).toBe("function");\n  });\n  \n  it("should cleanup WebSocket connection on unmount", () => {\n    const { unmount } = renderHook(() => usePolygonTicker("ES"));\n    \n    const closeSpy = vi.spyOn(MockWebSocket.prototype, "close");\n    unmount();\n    \n    // Note: This test might need adjustment based on the actual cleanup logic\n    expect(closeSpy).toHaveBeenCalled();\n  });\n});